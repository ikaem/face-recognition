{"version":3,"sources":["components/Navigation/Navigation.js","components/Logo/Logo.js","components/ImageLinkForm/ImageLinkForm.js","components/Rank/Rank.js","components/ImageRecognition/ImageRecognition.js","components/SignIn/SignIn.js","components/Register/Register.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","onRouteChange","isSignedIn","style","display","justifyContent","onClick","className","Logo","options","max","height","width","alt","paddingTop","src","ImageLinkForm","onInputChange","onButtonSubmit","onChange","type","value","Rank","name","entries","charAt","toUpperCase","slice","ImageRecognition","imageUrl","boxes","id","map","val","i","key","top","topRowPixel","right","rightColPixel","bottom","bottomRowPixel","left","leftColPixel","SignIn","props","onEmailChange","event","setState","signInEmail","target","onPasswordChange","signInPassword","onSubmitSignIn","fetch","method","headers","body","JSON","stringify","email","state","password","then","response","json","user","loadUser","console","log","htmlFor","this","React","Component","Register","onNameChange","onSubmitRegister","catch","err","d","particlesOptions","particles","number","density","enable","value_area","initialState","input","box","route","joined","App","data","calculateFaceLocation","image","document","getElementById","leftColPercent","region_info","bounding_box","left_col","topRowPercent","top_row","rightColPercent","right_col","bottomRowPercent","bottom_row","face","displayFaceBox","onSubmit","Object","assign","outputs","regions","switchRender","params","href","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4fb57d66.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Navigation = ({onRouteChange, isSignedIn}) => {\r\n\r\n    if(isSignedIn) {\r\n        return(\r\n            <nav\r\n            style={{display: 'flex', justifyContent: 'flex-end'}}>\r\n                <p \r\n                onClick={() => onRouteChange(\"signOut\")}\r\n                className=\"f3 link dim black underline pa3 pointer\">Sign Out</p>\r\n            </nav>\r\n        )\r\n    }\r\n    else {\r\n        return(\r\n            <nav\r\n            style={{display: 'flex', justifyContent: 'flex-end'}}>\r\n                <p \r\n                onClick={() => onRouteChange(\"signIn\")}\r\n                className=\"link dim black pa3 pointer\">Sign In</p>\r\n                <p \r\n                onClick={() => onRouteChange(\"register\")}\r\n                className=\"link dim black pa3 pointer\">Register</p>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport Tilt from 'react-tilt';\r\nimport './Logo.css';\r\n\r\nconst Logo = () => {\r\n    return (\r\n        <div className=\"ma4 mt0\">\r\n            <Tilt className=\"Tilt\" options={{ max : 1 }} style={{ height: 40, width: 150 }} >\r\n                <div className=\"Tilt-inner\">\r\n                    <img \r\n                    alt=\"logo\" \r\n                    style={{paddingTop: '5px'}}\r\n                    src=\"https://img.icons8.com/wired/64/000000/settings.png\"/>\r\n                </div>\r\n            </Tilt>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Logo;","import React from 'react';\r\nimport './ImageLinkForm.css';\r\n\r\nconst ImageLinkForm = ({onInputChange, onButtonSubmit}) => {\r\n    return (\r\n        <div>\r\n            <p className=\"f5\">\r\n                {\"Upload a photo to check if there is a human face in it.\"}\r\n            </p>\r\n            <div className=\"centerContent\">\r\n                <div className=\"form pa4 br3 shadow-5\">\r\n                    <input \r\n                    className=\"f4 pa2 w-70 center bn\"\r\n                    onChange={onInputChange} \r\n                    type=\"text\"/>\r\n                    {/* <button>Detect</button> */}\r\n                    <input \r\n                    className=\"w-30 grow f4 link ph3 pv2 dib white bg-dark-red bn\"\r\n                    onClick={onButtonSubmit}\r\n                    type=\"button\" \r\n                    value=\"Detect\"/>\r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImageLinkForm;","import React from 'react';\r\n\r\nconst Rank = ({name, entries}) => {\r\n    //const nameCapd = name.charAt(0).toUpperCase() + name.slice(1);\r\n    return (\r\n        <div>\r\n            <div className=\"white f3\">\r\n                {`${name.charAt(0).toUpperCase() + name.slice(1)}, your current rank is`}\r\n            </div>\r\n            <div className=\"white f1\">\r\n                {entries}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Rank;\r\n\r\n//name.charAt(0).toUpperCase() + name.slice(1)","import React from 'react';\r\nimport './ImageRecognition.css';\r\n\r\n// const array = [100,200,300];\r\n\r\nconst ImageRecognition = ({ imageUrl, boxes }) => {\r\n\r\n    return (\r\n        <div className=\"centerContent ma\">\r\n\r\n            <div className=\"absolute mt2\">\r\n                <img \r\n                id=\"inputImage\"\r\n                className=\"imageLoad\" \r\n                src={imageUrl} \r\n                width=\"500px\"\r\n                height=\"auto\"\r\n                alt=\"\"/>\r\n                {/* test */}\r\n{/*                 <div \r\n                className=\"bounding-box\"\r\n                style={{\r\n                    top: props.box.topRow,\r\n                    right: props.box.rightCol,\r\n                    bottom: props.box.bottomRow,\r\n                    left: props.box.leftCol\r\n                }}></div> */}\r\n\r\n{/*                 {array.map((val, i) => {\r\n                    return (\r\n                        <h1\r\n                        key={i}\r\n                        >{val}</h1>\r\n                    )\r\n                })} */}\r\n                {\r\n                    boxes.map((val, i) => {\r\n                        return (\r\n                            <div\r\n                            key={i}\r\n                            className=\"bounding-box\"\r\n                            style={{\r\n                            top: val.topRowPixel,\r\n                            right: val.rightColPixel,\r\n                            bottom: val.bottomRowPixel,\r\n                            left: val.leftColPixel\r\n                            }}>\r\n\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageRecognition;","import React from 'react';\r\n\r\nclass SignIn extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            signInEmail: \"\",\r\n            signInPassword: \"\",\r\n        }\r\n    }\r\n    onEmailChange = (event) => {\r\n        this.setState({signInEmail: event.target.value});\r\n    }\r\n    onPasswordChange = (event) => {\r\n        this.setState({signInPassword: event.target.value});\r\n    }\r\n    onSubmitSignIn = () => {\r\n        fetch(\"http://localhost:3000/signin\", {\r\n            method: \"post\",\r\n            headers: {\"Content-Type\": \"application/json\"},\r\n            body: JSON.stringify({\r\n                email: this.state.signInEmail,\r\n                password: this.state.signInPassword\r\n            })\r\n        })\r\n        .then(response => response.json())\r\n        .then(user => {\r\n            // if(data === \"success\"){\r\n            if(user.id){ // this just makes sure there is an id property in the response\r\n                this.props.loadUser(user);\r\n                this.props.onRouteChange('home');\r\n            }\r\n            console.log(\"Backend user\", user)\r\n        })\r\n        console.log(\"Frontend user\", this.state);\r\n\r\n    }\r\n\r\n    render(){\r\n        //const {onRouteChange} = this.props;\r\n        return (\r\n            <article className=\"br2 ba dark-gray b--black-10 mv4 w-100 w-50-m w-25-l mw5 center\">\r\n                <main className=\"pa4 black-80\">\r\n                    <div className=\"measure\">\r\n                        <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n                            <legend className=\"f4 fw6 ph0 mh0\">Sign In</legend>\r\n                            <div className=\"mt3\">\r\n                                <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\r\n                                <input \r\n                                className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\"\r\n                                onChange={this.onEmailChange} \r\n                                type=\"email\" \r\n                                name=\"email-address\"  id=\"email-address\"/>\r\n                            </div>\r\n                            <div className=\"mv3\">\r\n                                <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\r\n                                <input \r\n                                className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" \r\n                                onChange={this.onPasswordChange}\r\n                                type=\"password\" \r\n                                name=\"password\"  \r\n                                id=\"password\"/>\r\n                            </div>\r\n                        </fieldset>\r\n                        <div className=\"\">\r\n                            <input \r\n                            onClick={this.onSubmitSignIn}\r\n                            className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\" \r\n                            type=\"submit\" value=\"Sign in\"/>\r\n                        </div>\r\n                        <div className=\"lh-copy mt3\">\r\n                            <p  \r\n                            className=\"f6 link dim black db pointer\"\r\n                            onClick={() => this.props.onRouteChange('register')}>\r\n                            Register</p>\r\n                        </div>\r\n                    </div>\r\n                </main>\r\n            </article>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SignIn;","import React from 'react';\r\n\r\nclass Register extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            email: \"\",\r\n            password: \"\",\r\n            name: \"\",\r\n        }\r\n    }\r\n    onEmailChange = (event) => {\r\n        this.setState({email: event.target.value});\r\n    }\r\n    onPasswordChange = (event) => {\r\n        this.setState({password: event.target.value});\r\n    }\r\n    onNameChange = (event) => {\r\n        this.setState({name: event.target.value});\r\n    }\r\n    onSubmitRegister = () => {\r\n        fetch(\"http://localhost:3000/register\", {\r\n            method: \"post\",\r\n            headers: {\"Content-Type\": \"application/json\"},\r\n            body: JSON.stringify({\r\n                name: this.state.name,\r\n                password: this.state.password,\r\n                email: this.state.email\r\n            })\r\n        })\r\n        .then(response => response.json())\r\n        .then(user => {\r\n            if(user.id){\r\n                this.props.loadUser(user);\r\n                this.props.onRouteChange('home');\r\n            }\r\n        })\r\n        .catch(err => console.log(\"Cannot fetch!\", err));\r\n    }\r\n\r\n    render(){\r\n        //const {onRouteChange} = this.props;\r\n        return(\r\n            <article className=\"br2 ba dark-gray b--black-10 mv4 w-100 w-50-m w-25-l mw5 center\">\r\n                <main className=\"pa4 black-80\">\r\n                    <div className=\"measure\">\r\n                        <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n                            <legend className=\"f4 fw6 ph0 mh0\">Register</legend>\r\n                            <div className=\"mt3\">\r\n                                <label className=\"db fw6 lh-copy f6\" htmlFor=\"name\">Name</label>\r\n                                <input \r\n                                className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" \r\n                                onChange={this.onNameChange}\r\n                                type=\"text\" \r\n                                name=\"name\"  \r\n                                id=\"name\"/>\r\n                            </div>\r\n                            <div className=\"mt3\">\r\n                                <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\r\n                                <input \r\n                                className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" \r\n                                onChange={this.onEmailChange}\r\n                                type=\"email\" \r\n                                name=\"email-address\"  \r\n                                d=\"email-address\"/>\r\n                            </div>\r\n                            <div className=\"mv3\">\r\n                                <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\r\n                                <input \r\n                                className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" \r\n                                onChange={this.onPasswordChange}\r\n                                type=\"password\" \r\n                                name=\"password\"  \r\n                                id=\"password\"/>\r\n                            </div>\r\n                        </fieldset>\r\n                        <div className=\"\">\r\n                            <input \r\n                            onClick={this.onSubmitRegister}\r\n                            className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\" \r\n                            type=\"submit\" value=\"Register\"/>\r\n                        </div>\r\n                    </div>\r\n                </main>\r\n            </article>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Register;","import React from 'react';\nimport Navigation from './components/Navigation/Navigation';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport ImageRecognition from './components/ImageRecognition/ImageRecognition';\nimport SignIn from './components/SignIn/SignIn';\nimport Register from './components/Register/Register';\nimport Particles from 'react-particles-js';\nimport './App.css';\n\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 80,\n      density: {\n        enable: true,\n        value_area: 800\n      }\n    }\n  }\n}\n\nconst initialState = {\n  input: '',\n  imageUrl: '',\n  box: {},\n  boxes: [],\n  route: \"signIn\",\n  isSignedIn: false,\n  user: {\n    id: \"\",\n    name: \"\",\n    email: \"\",\n    entries: 0,\n    joined: \"\"\n  }\n}\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state = initialState;\n  }\n\n  loadUser = (data) => {\n    console.log(data);\n    this.setState({user: {\n      id: data.id,\n      name: data.name,\n      email: data.email,\n      entries: data.entries,\n      joined: data.joined\n    }})\n    console.log(this.state.user);\n  }\n\n\n  calculateFaceLocation = (data) => {\n    const image = document.getElementById(\"inputImage\");\n    const width = image.width;\n    const height = image.height;\n    const facesPercent = data.map(val => {\n      return {\n          leftColPercent: val.region_info.bounding_box.left_col,\n          topRowPercent: val.region_info.bounding_box.top_row,\n          rightColPercent: val.region_info.bounding_box.right_col,\n          bottomRowPercent: val.region_info.bounding_box.bottom_row\n      }\n    })\n\n    const facesPixel = facesPercent.map(face => {\n      return {\n        leftColPixel: face.leftColPercent * width,\n        topRowPixel: face.topRowPercent * height,\n        rightColPixel: width - (face.rightColPercent * width),\n        bottomRowPixel: height - (face.bottomRowPercent * height)\n      }\n    })\n\n    return facesPixel;\n  }\n\n  displayFaceBox = (boxes) => {\n    this.setState({boxes: boxes})\n  }\n\n  onInputChange = (event) => {\n    this.setState({input: event.target.value});\n  }\n  onSubmit = () => {\n    this.setState({imageUrl: this.state.input})\n\n///\n    fetch(\"http://localhost:3000/imageurl\", {\n      method: \"post\",\n      headers: {\"Content-Type\": \"application/json\"},\n      body: JSON.stringify({\n        input: this.state.input\n      })\n    })\n    .then(response => response.json())\n    .then(response => {\n      if(response){\n        fetch(\"http://localhost:3000/image\", {\n          method: \"put\",\n          headers: {\"Content-Type\": \"application/json\"},\n          body: JSON.stringify({\n            id: this.state.user.id,\n            entries: this.state.user.entries\n          })\n        })\n        .then(response => response.json())\n        .then(entries => {\n          this.setState(Object.assign(this.state.user, { entries: entries}))\n        })\n        .catch(err => console.log(err));\n      }\n      this.displayFaceBox(this.calculateFaceLocation(response.outputs[0].data.regions))\n    })\n    .catch(err => console.log(err))\n  }\n  \n  onRouteChange = (route) => {\n    if(route === \"signOut\"){\n      this.setState(initialState);\n    }\n    else if(route === \"home\"){\n      this.setState({isSignedIn: true});\n    }\n    this.setState({route: route})\n  }\n\n\n  switchRender = () => {\n    switch(this.state.route){\n      case \"signIn\": \n      case \"signOut\": \n        return (\n          <SignIn\n            onRouteChange={this.onRouteChange}\n            loadUser={this.loadUser}\n          />\n        );\n      case \"home\":\n        return (\n        <div>\n          <Logo/>\n          <Rank\n            name={this.state.user.name}\n            entries={this.state.user.entries}\n          />\n          <ImageLinkForm\n            onInputChange={this.onInputChange}\n            onButtonSubmit={this.onSubmit}\n          />\n                  \n          <ImageRecognition\n            imageUrl={this.state.imageUrl}\n            box={this.state.box}\n            boxes={this.state.boxes}\n  \n          /> \n        </div>\n        );\n      case \"register\": \n        return (\n          <Register\n            onRouteChange={this.onRouteChange}\n            loadUser={this.loadUser}\n          />\n        );\n      default: \n        return null;\n    }\n  }\n\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Particles className=\"particles\"\n          params={particlesOptions} />\n        <Navigation \n          onRouteChange={this.onRouteChange}\n          isSignedIn={this.state.isSignedIn}\n        />\n        {this.switchRender()}\n        <h6><a href=\"https://icons8.com/icon/47834/cute-outline\">Cute Outline icon by Icons8</a></h6>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}